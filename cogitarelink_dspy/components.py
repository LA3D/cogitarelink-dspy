"""A centralized registry of all Cogitarelink tools organized by semantic layer."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/archive/01_components.ipynb.

# %% auto 0
__all__ = ['COMPONENTS', 'get_tools_by_layer', 'list_layers', 'validate_component_registry']

# %% ../nbs/archive/01_components.ipynb 3
# Component registry organized by semantic layer:
# 1. Context - Tools for handling JSON-LD contexts and namespaces
# 2. Ontology - Tools for fetching and exploring ontologies/vocabularies
# 3. Rules - Tools for validation and rules processing
# 4. Instances - Tools for data instance management
# 5. Verification - Tools for verification and signatures

COMPONENTS = {
    # ===== Basic Echo Tool (for testing) =====
    "Utils": {
        "layer": "Utility",
        "tool": "EchoMessage",
        "doc": "Simply echoes the input message back.",
        "calls": "load_module_source(module_name:str, full_name:bool=False) -> str",
        "module": "cogitarelink.utils"
    },
    
    # ===== Context Layer =====
    "ContextProcessor": {
        "layer": "Context",
        "tool": "LoadContext",
        "doc": "Loads and processes JSON-LD contexts.",
        "calls": "compact(doc:dict, ctx:dict) -> dict",
        "module": "cogitarelink.core.context"
    },
    
    # ===== Ontology Layer =====
    "VocabRegistry": {
        "layer": "Ontology",
        "tool": "FetchOntology",
        "doc": "Accesses the vocabulary registry.",
        "calls": "resolve(uri:str) -> dict",
        "module": "cogitarelink.vocab.registry"
    },
    
    # ===== Rules Layer =====
    "ValidateEntity": {
        "layer": "Rules",
        "tool": "ValidateEntity",
        "doc": "Validates an Entity against SHACL shapes.",
        "calls": "validate_entity(target:str, shapes_graph:str) -> bool",
        "module": "cogitarelink.verify.validator"
    },
    
    # ===== Instances Layer =====
    "GraphManager": {
        "layer": "Instances",
        "tool": "GraphManager",
        "doc": "Manages RDF graphs and triples.",
        "calls": "query(q:str) -> dict",
        "module": "cogitarelink.core.graph"
    },
    
    # ===== Verification Layer =====
    "Signer": {
        "layer": "Verification",
        "tool": "VerifySignature",
        "doc": "Verifies a digital signature on a named graph.",
        "calls": "verify(graph_id:str, signature:str) -> bool",
        "module": "cogitarelink.verify.signer"
    },
    
    # ===== Memory Tools =====
    "AddReflection": {
        "layer":"Utility",
        "tool":"AddReflection",
        "doc":"Persist a reflection into semantic memory",
        "calls":"add(text:str, tags:list=None)->str",
        "module":"cogitarelink_dspy.memory"
    },
    "RecallReflection": {
        "layer":"Utility",
        "tool":"RecallReflection",
        "doc":"Retrieve recent reflection notes",
        "calls":"retrieve(limit:int, tag_filter:str=None)->list",
        "module":"cogitarelink_dspy.memory"
    },
    "ReflectionPrompt": {
        "layer":"Utility",
        "tool":"ReflectionPrompt",
        "doc":"Format recent notes for prompt injection",
        "calls":"as_prompt(limit:int)->str",
        "module":"cogitarelink_dspy.memory"
    }
}

# %% ../nbs/archive/01_components.ipynb 4
def get_tools_by_layer(layer, registry=COMPONENTS):
    """Return all tool definitions for a specific layer.
    
    Args:
        layer (str): The layer name to filter by
        registry (dict, optional): The component registry to use. Defaults to COMPONENTS.
        
    Returns:
        dict: Dictionary of component name to metadata for the specified layer
    """
    return {name: meta for name, meta in registry.items() 
            if meta['layer'] == layer}

def list_layers(registry=COMPONENTS):
    """Return all unique layers in the component registry.
    
    Args:
        registry (dict, optional): The component registry to use. Defaults to COMPONENTS.
        
    Returns:
        list: Sorted list of layer names
    """
    return sorted(list(set(meta['layer'] for meta in registry.values())))

# %% ../nbs/archive/01_components.ipynb 6
def validate_component_registry(registry=COMPONENTS):
    """Validate that all entries in the component registry have required fields."""
    # Module field is optional; only layer, tool, doc, and calls are required
    required_fields = ['layer', 'tool', 'doc', 'calls']
    errors = []
    
    for name, meta in registry.items():
        # Check required fields
        for field in required_fields:
            if field not in meta:
                errors.append(f"Component {name} is missing required field '{field}'")
        
        # Validate tool name is a valid Python identifier
        if 'tool' in meta and not meta['tool'].isidentifier():
            errors.append(f"Component {name} has invalid tool name '{meta['tool']}', must be a valid Python identifier")
        
        # Validate calls format
        if 'calls' in meta:
            try:
                # Attempt to parse the signature
                call_sig = meta['calls']
                if '(' not in call_sig or ')' not in call_sig:
                    errors.append(f"Component {name} has malformed calls '{call_sig}', expected format 'method(param:type, ...)'")
            except Exception as e:
                errors.append(f"Component {name} has invalid calls string: {str(e)}")
                
    # Check for duplicates
    tools = {}
    for name, meta in registry.items():
        if 'tool' in meta:
            tool_name = meta['tool']
            if tool_name in tools:
                errors.append(f"Duplicate tool name '{tool_name}' in components '{name}' and '{tools[tool_name]}'")
            else:
                tools[tool_name] = name
                
    return errors
