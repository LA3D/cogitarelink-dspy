"""A centralized registry of all Cogitarelink tools organized by semantic layer."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_components.ipynb.

# %% auto 0
__all__ = ['COMPONENTS', 'get_tools_by_layer', 'list_layers', 'validate_component_registry']

# %% ../nbs/01_components.ipynb 3
# Component registry organized by semantic layer:
# 1. Context - Tools for handling JSON-LD contexts and namespaces
# 2. Ontology - Tools for fetching and exploring ontologies/vocabularies
# 3. Rules - Tools for validation and rules processing
# 4. Instances - Tools for data instance management
# 5. Verification - Tools for verification and signatures

COMPONENTS = {
    # ===== Basic Echo Tool (for testing) =====
    "Echo": {
        "layer": "Utility",
        "tool": "EchoMessage",
        "doc": "Simply echoes the input message back.",
        "calls": "forward(message:str)"
    },
    
    # ===== Context Layer =====
    "SimpleContext": {
        "layer": "Context",
        "tool": "LoadContext",
        "doc": "Loads a simple JSON-LD context from a string or URL.",
        "calls": "load(source:str)"
    },
    
    # ===== Ontology Layer =====
    "OntologyFetcher": {
        "layer": "Ontology",
        "tool": "FetchOntology",
        "doc": "Fetches and caches a vocabulary or ontology by URI.",
        "calls": "fetch(uri:str)"
    },
    
    # ===== Rules Layer =====
    "SimpleValidator": {
        "layer": "Rules",
        "tool": "ValidateTriple",
        "doc": "Validates if a triple conforms to basic RDF rules.",
        "calls": "validate(subject:str, predicate:str, object:str)"
    },
    
    # ===== Instances Layer =====
    "TripleStore": {
        "layer": "Instances",
        "tool": "StoreTriple",
        "doc": "Stores a triple in the graph manager.",
        "calls": "add(subject:str, predicate:str, object:str)"
    },
    
    # ===== Verification Layer =====
    "SignatureChecker": {
        "layer": "Verification",
        "tool": "VerifySignature",
        "doc": "Verifies a digital signature on a named graph.",
        "calls": "verify(graph_id:str, signature:str)"
    }
}

# %% ../nbs/01_components.ipynb 4
def get_tools_by_layer(layer, registry=COMPONENTS):
    """Return all tool definitions for a specific layer."""
    return {name: meta for name, meta in registry.items() 
            if meta['layer'] == layer}

def list_layers(registry=COMPONENTS):
    """Return all unique layers in the component registry."""
    return sorted(list(set(meta['layer'] for meta in registry.values())))

# %% ../nbs/01_components.ipynb 6
def validate_component_registry(registry=COMPONENTS):
    """Validate that all entries in the component registry have required fields."""
    required_fields = ['layer', 'tool', 'doc', 'calls']
    errors = []
    
    for name, meta in registry.items():
        for field in required_fields:
            if field not in meta:
                errors.append(f"Component {name} is missing required field '{field}'")
                
    return errors
